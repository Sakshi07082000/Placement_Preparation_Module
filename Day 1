// Set Matrix Zeros

import java.util.* ;
import java.io.*; 
public class Solution {
    public static void setZeros(int matrix[][]) 
    {
        int row=matrix.length, col=matrix[0].length;
        int d1[]=new int[row];
        int d2[]=new int[col];
        Arrays.fill(d1,-1);
        Arrays.fill(d2,-1);
        for(int i=0; i<row; i++)
        {
            for(int j=0; j<col; j++)
            {
                if(matrix[i][j]==0)
                    d1[i]=d2[j]=0;
            }
        }
        for(int i=0; i<row; i++)
        {
            for(int j=0; j<col; j++)
            {
                if(d1[i]==0 || d2[j]==0)
                    matrix[i][j]=0;
            }
        }
    }
}

// Pascal's Triangle

import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {
	public static ArrayList<ArrayList<Long>> printPascal(int n) 
    {
        ArrayList<ArrayList<Long>> mat = new ArrayList<ArrayList<Long>>();
        ArrayList<Long> row, pre = null;
        for(int i=0;i<n;i++)
        {
           row = new ArrayList<Long>();
           for(int j=0;j<=i;j++){
               if(j==0 || j==i)
                   row.add( (long) 1);
               else
                   row.add(pre.get(j) + pre.get(j-1));               
         }
          pre = row;
          mat.add(row);
        }
        return mat;         
	}
}


// Best Time to Buy and Sell Stock

import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution
{
    public static int maximumProfit(ArrayList<Integer> prices)
    {
        int profit=0;
        int buy = prices.get(0);
        for(int i=1; i<prices.size(); i++)
        {
            if(prices.get(i)>buy)
            {
                profit=Math.max(profit, prices.get(i)-buy);
            }
            else
                buy=prices.get(i);
        }
        return profit;
    }
}
